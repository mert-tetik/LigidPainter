#version 330 core

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
}; 
  
uniform Material material;

out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;  
in vec3 Pos;

uniform int is2D;
uniform vec3 lightPos;  
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 viewPos;
uniform int isLightSource;
uniform int isAxisPointer;
uniform vec3 uiColor;

void main()
{    
    
    // ambient
    vec3 ambient  = vec3(0.2,0.2,0.2) * vec3(texture(material.diffuse, TexCoords));

    // diffuse 
    vec3 norm = normalize(Normal);	
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse  = vec3(1.0f, 1.0f, 1.0f)  * diff * vec3(texture(material.diffuse, TexCoords));

    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); 
    vec3 specular = lightColor * spec * vec3(texture(material.specular, TexCoords));

    vec3 result = ambient + diffuse + specular;
    if(is2D == 0){
       if(isLightSource == 1){
          FragColor = vec4(1.0,1.0,1.0,1.0);
       }
       else if (isLightSource == 0){
          if(isAxisPointer == 0)
          FragColor = vec4(result,1.0);
          else{
  	      FragColor = vec4(abs(Pos.x)/20,abs(Pos.y)/20,abs(Pos.z)/20,1);
	   }
       }
    }
    else{
       FragColor = vec4(uiColor,1.0);
    }
}


 