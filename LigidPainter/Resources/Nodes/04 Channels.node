# For ligidtools.com
# Node extension v1.0

%attributes;

-title : Channels;
-color : hex4287f5; #rgb122,124,66  #hsv86,45,23
-opacity : 60;

-input_0 : 
--list : none;
--list_index : none;
--type : vec3;
--title : Color;
--element : none;
--value : 0,0,0;

-output_0 :
--list : none;
--list_index : none;
--type : vec3;
--title : R;

-output_1 :
--list : none;
--list_index : none;
--type : vec3;
--title : G;

-output_2 :
--list : none;
--list_index : none;
--type : vec3;
--title : B;

-output_3 :
--list : none;
--list_index : none;
--type : vec3;
--title : H;

-output_4 :
--list : none;
--list_index : none;
--type : vec3;
--title : S;

-output_5 :
--list : none;
--list_index : none;
--type : vec3;
--title : V;


-uniforms : tex_coords|normal|posScene|posModel;

%code;

vec3 RGBToHSV(vec3 rgbData){
	float maxV = max(max(rgbData.r,rgbData.g),rgbData.b);
	float minV = min(min(rgbData.r,rgbData.g),rgbData.b);
	float hue;
	float saturation;
	float value;

	value = maxV/255.0;
	if(maxV > 0){
		saturation = 1.0f - float(minV)/float(maxV);
	}
	else if(maxV == 0){
		saturation = 0;
	}
    if (maxV == rgbData.r) {
        hue = (rgbData.g - rgbData.b) / (maxV - minV);

    } else if (maxV == rgbData.g) {
        hue = 2.0f + (rgbData.b - rgbData.r) / (maxV - minV);

    } else {
        hue = 4.0f + (rgbData.r - rgbData.g) / (maxV - minV);
    }
    hue = hue * 60.0;
    if (hue < 0){
		hue = hue + 360.0;	
	} 
	
	if (minV == maxV) {
        hue = 0;
    }
	vec3 hsvVal = vec3(round(hue),saturation,value);
	return hsvVal;
}

void main (){
    vec3 rgb = texture2D(input_0,tex_coords).rgb;
    vec3 hsv = RGBToHSV(rgb);

    output_0 = vec4(rgb.r,0,0,1);
    output_1 = vec4(0,rgb.g,0,1);
    output_2 = vec4(0,0,rgb.b,1);
    
    output_3 = vec4(vec3(hsv.r),1);
    output_4 = vec4(vec3(hsv.g),1);
    output_5 = vec4(vec3(hsv.b),1);
}