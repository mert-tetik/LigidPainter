# For ligidtools.com
# Node extension v1.0

%attributes;

-title : Noise;
-color : hexf72d4b; #rgb122,124,66  #hsv86,45,23
-opacity : 60;

-list_0 :
--title_0 : hexBorder1;
--title_1 : hexBorder2;
--title_2 : hexId3Hues;
--title_3 : hexTruchet;
--title_4 : CheckerSignMuFract;
--title_5 : Checker1ByMuSin;
--title_6 : TrianglePattern;
--title_7 : RhombStar;
--title_8 : TartanKaro;
--title_9 : TartanSquare;
--title_10 : SquareHolePattern;
--title_11 : sinePattern;
--title_12 : Grid;
--title_13 : BrickPattern;
--title_14 : GearPattern;
--title_15 : QCirclePattern;
--title_16 : StarPattern;
--title_17 : weave1;
--title_18 : weave2;
--title_19 : weave3;
--title_20 : weave4;
--title_21 : truchetTiny70s;
--title_22 : weaveInt;
--title_23 : tissue;

-input_0 : 
--list : none;
--list_index : none;
--type : vec2;
--title : Transform;
--element : range;
--value : 100,100;

-input_1 : 
--list : none;
--list_index : none;
--type : vec2;
--title : Scale;
--element : range;
--value : 100,100;

-input_2 : 
--list : none;
--list_index : none;
--type : vec3;
--title : Color1;
--element : color;
--value : 0,0,0;

-input_3 : 
--list : none;
--list_index : none;
--type : vec3;
--title : Color2;
--element : color;
--value : 255,255,255;


-output_0 :
--list : none;
--list_index : none;
--type : vec3;
--title : Texture;


-uniforms : tex_coords|normal|posScene|posModel;

%code;
//From https://www.shadertoy.com/view/lt3fDS
//---------------------------------------------------------
// Shader: 2dProceduralPattern.glsl  by gPlatl
//
// tags:   procedural, pattern, 2d, basic, texture, collection
// note:   procedural pattern routines will return values from 0.0 .. 1.0
//
// references:
//   Procedural Patterns          http://slideplayer.com/slide/6400090/
//   Antialiasing Proc. Textures  http://www.yaldex.com/open-gl/ch17lev1sec4.html
//---------------------------------------------------------


vec3 iResolution = vec3(1);
float iTime = 1;
vec3 iMouse = vec3(1);

#define patternCount 23.0

#define PI 3.141592

#define pi acos(-1.)
#define dd(a) dot(a,a)
#define sat(a) clamp(a,0.,1.)
#define aA(z) (z/min(iResolution.x,iResolution.y))


float mi(vec2 a){return min(a.x,a.y);}
float mi(vec3 a){return min(a.x,mi(a.yz));}
float ma(vec2 a){return max(a.x,a.y);}
float mu(vec2 a){return a.x*a.y;}
float ad(vec2 a){return a.x+a.y;}
float su(vec2 a){return a.x-a.y;}
float sq2(float a){return a*a;}


float GearPattern(vec2 uv,float wn,int tn ,float time){
    float g = (step(1.0, uv.x * wn) - 0.5) * time;
    uv = fract(uv * wn) - 0.5;
    float r = clamp(0.48, 0.4, 0.45 + 0.12*sin(atan(uv.x,uv.y) * float(tn) + g));
    return smoothstep(r, r + 0.01, 1.1*length(uv));
}
float CheckerSignMuFract(vec2 u)
{
    return sign(mu(.5-fract(u)));
}
float CheckerSatMuSin(vec2 u){
    return sat(88.*mu(sin(u*8.)));
}
float Checker1ByMuSin(vec2 u){
    return 1./mu(sin(u));
}
float TartanKaro(vec2 u){
    return .5*ad(sat(10.*sin(u)));
}
float TartanSquare(vec2 u){
    return 4.*mu(sat(10.*sin(u)));
}
float SquareHolePattern(vec2 u){
    u.x=mu(sin(u*2.));
    return smoothstep(.1,.0, sq2(u.x)*2.5);
 }
float Grid(vec2 u){
    return mi(abs(fract(u)-.5));
}
float BrickPattern(vec2 p)
{
    //p*=vec2 (1,2);  // scale
    vec2 f=floor(p);
    p.x-=step(f.y,2.*floor(f.y*.5))*.5;// brick shift
    p=abs (fract (p + 0.5) - 0.5);
    //p=smoothstep (0.03, 0.08, p);
    return min(p.x,p.y);
}
vec2 toTri(vec2 u){
    return vec2(u.x,(u.y*sqrt(3.)+u.x)*.5);
}
float TrianglePattern(vec2 u){
    return step(su(fract(toTri(u))),0.);
}
float RhombStar(vec2 u){
    u.x=sq2(su(fract(toTri(u))));
    return step(.25,u.x);//this is less silly
    //return smoothstep(.5,.0,u.x);//rather silly (optical illusion) //doesnt mix well with above line)
}
float hexBorder(vec2 u){
    u.x*=sqrt(3.)*2./3.;
    u.y+= 0.5 * mod(floor(u.x), 2.0);
    u = abs(fract(u)-.5);
    return abs(max(u.x*1.5+u.y,u.y*2.)-1.);
}
bool hexaGridId(vec2 a){
    float b=(1.-a.y)*.5;
    return a.y>1.&&(abs(b-a.x+a.y)>-b);
}
bool hexaGridIdX(vec2 p){ 
    return 1.>ma(p-p.yx) && max(-mi(p),ma(p)-2.)<0.;
}
float hexId3Hues(vec2 p){
    p =toTri(p);
    p = mod(p,vec2(3));
    
    if(hexaGridIdX(p))
        return .0;
    else if(hexaGridId(p))
        return .5;
    else              
        return 1.;
}

float hexTruchet(vec2 p)
{
    float s=sqrt(3.);
    vec2 h=p+vec2(s,.45)*p.y/3.;
    vec2 f=fract(h);h=floor(h);
    float v=fract(ad(h)/3.);
    h+=mix(vec2(step(.3,v)),step(f.yx,f),step(.6,v));
    p+=vec2(1,2.-sqrt(3.))*h.y*.5-h;
    v=sign(cos(1234.*cos(h.x+9.*h.y)));
    vec3 a=vec3(dd(p-v*vec2(-2, 0)*.5)
             ,dd(p-v*vec2( 1, s)*.5)
             ,dd(p-v*vec2( 1,-s)*.5));
    v=(.5-sqrt(mi(a)))*v;
    
    v=abs(v);
    v=1.-(1.-v*2.);
    float z=8.;
    //return smoothstep(aA(z),-aA(z),v-(cos(iTime)*(.5-aA(z))+.5));
    return v;
}

float sinePattern(vec2 p){
    return sin(p.x*20.+cos(p.y*12.));
}

float SinePatternCrissCross(vec2 p)
{
    return .5+sinePattern(p)*sinePattern(p.yx);
}

float lengthP(vec2 u, float p){
    return pow(pow(abs(u.x),p)+pow(abs(u.y),p),1./p);
}

float QCirclePattern(vec2 u){
    return sin(lengthP(fract(u*4./2.)*2.-1.,4.)*16.);
}

float StarPattern(vec2 p ){
    p= abs(fract(p*1.5)-.5);
    return max(ma(p),mi(p)*2.);
}

float weaveSub(vec2 u,float p){
    return step(.2,abs(fract(u.x)))*(.65+.35*sin(p*(u.y-ceil(u.x))));
}

float weave(vec2 u,float r)
{
    float a=weaveSub(u,pi/r);
    u=u.yx;
    u.y++;
    float b=weaveSub(u,pi/r);
    return max (a,b);
}

float weave(vec2 u){
    return weave(u,1.);
}

float truchetTiny70s(vec2 p,float time)
{
    p.x*=sign(cos(length(ceil(p))*time));
    return cos(min(length(p=fract(p)),length(--p))*44.);
}

float xof(float a,float b){
    return float(int(a)^int(b));
}
float anf(float a,float b){
    return float(int(a)&int(b));
}
float anf(int   a,float b){
    return float(int(a)&int(b));
}

float weaveInt(vec2 coord){
    ivec2 uv=ivec2(floor(coord*5.));
    float a = floor(mod(iTime,7.))*4.;
    float bg  =.0;
    float warp=.5;
    float weft=1.;
    vec2 f=floor(vec2(uv.xy)*.5);
    a=anf(uv.x^uv.y,a);
    vec2 h=vec2(xof(float(uv.x),f.x),xof(float(uv.y),f.y));
    h=fract(h/2.)*2.;
    vec3 i=smoothstep(1.,0.,vec3(a,h.xy));
    float d=mix(weft,bg,i.z);
    float e=mix(warp,bg,i.y);
    float c=mix(d,e,i.x);;
    return c;
}

float demo(vec2 u){
   return weaveInt(u);
}

// 2D Random
float tissrandom (in vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))
                 * 43758.5453123);
}

// 2D Noise based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float tissnoise (vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in 2D of a tile
    float a = tissrandom(i);
    float b = tissrandom(i + vec2(1.0, 0.0));
    float c = tissrandom(i + vec2(0.0, 1.0));
    float d = tissrandom(i + vec2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve.  Same as SmoothStep()
    vec2 u = f*f*(3.0-2.0*f);
    // u = smoothstep(0.,1.,f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

float tissue(){
        vec2 uvtransform = texture2D(input_0,tex_coords).xy*5.;
    vec2 uvscale = texture2D(input_1,tex_coords).xy*10.;

    vec2 st = gl_FragCoord.xy * uvscale + uvtransform;
    vec2 pos = vec2(st*5.0);
    float n = tissnoise(pos);

    return n;
}

float getResult(vec2 uv){
    float res;
    
    if      (list_0 == 0) 
        res = hexBorder (uv*1.25);
    else if (list_0 == 1) 
        res = hexBorder(uv*1.25);
    else if (list_0 == 2) 
        res = hexId3Hues(uv*2.0);
    else if (list_0 == 3) 
        res = hexTruchet (uv*3.);
    else if (list_0 == 4) 
        res = CheckerSignMuFract(uv);
    else if (list_0 == 5) 
        res = Checker1ByMuSin(uv*8.0);
    else if (list_0 == 6) 
        res = TrianglePattern(uv);
    else if (list_0 == 7) 
        res = RhombStar(uv);
    else if (list_0 == 8) 
        res = TartanKaro(uv);
    else if (list_0 == 9) 
        res = TartanSquare(uv);
    else if (list_0 ==10) 
        res = SquareHolePattern(uv);
    else if (list_0 ==11) 
        res = sinePattern(uv);
    else if (list_0 ==12) 
        res = Grid(uv);
    else if (list_0 ==13) 
        res = BrickPattern(uv);
    else if (list_0 ==14) 
        res = GearPattern(uv, 1.5, 12, iTime * 6.5);
    else if (list_0 ==15) 
        res = QCirclePattern(uv);
    else if (list_0 ==16) 
        res = StarPattern(uv);
    else if (list_0 ==17) 
        res = weave(uv);
    else if (list_0 ==18) 
        res = weave(uv,2.);
    else if (list_0 ==19) 
        res = weave(uv,3.);
    else if (list_0 ==20) 
        res = weave(uv,4.);
    else if (list_0 ==21) 
        res = truchetTiny70s(uv, iTime*0.1);
    else if (list_0 ==22) 
        res = weaveInt(uv);
    else if (list_0 ==23) 
        res = tissue();
    else                 
        res = demo(uv);

    return res;
}

void main(){
    vec2 uvtransform = texture2D(input_0,tex_coords).xy*5.;
    vec2 uvscale = texture2D(input_1,tex_coords).xy*10.;
    vec3 clr1 = texture2D(input_2,tex_coords).rgb;
    vec3 clr2 = texture2D(input_3,tex_coords).rgb;

    float aspect = iResolution.y / iResolution.x;
    
    vec2 mpos = iMouse.xy / iResolution.y;
    
    vec2 uv = tex_coords.xy;
    uv+=uvtransform;
    uv*=uvscale;

    float time = iTime;

    uv *= (0.2 + mpos.y) * 10.0;

    float res = getResult(uv);

    vec3 clrRes = mix(clr1,clr2,res);

    output_0 = vec4(clrRes,1);
}