# For ligidtools.com
# Node extension v1.0

%attributes;

-title : HSV;
-color : hexf72d4b; #rgb122,124,66  #hsv86,45,23
-opacity : 60;

-input_0 : 
--list : none;
--list_index : none;
--type : vec3;
--title : Transform;
--element : color;
--value : 100,100,100;


-input_1 : 
--list : none;
--list_index : none;
--type : float;
--title : Hue;
--element : range;
--value : 127;


-input_2 : 
--list : none;
--list_index : none;
--type : float;
--title : Saturation;
--element : range;
--value : 255;


-input_3 : 
--list : none;
--list_index : none;
--type : float;
--title : Value;
--element : range;
--value : 255;



-output_0 :
--list : none;
--list_index : none;
--type : vec3;
--title : Texture;


-uniforms : tex_coords|normal|posScene|posModel;

%code;
vec3 hsvToRgbConverter(float H,float S,float V){
        float r = 0, g = 0, b = 0;

	    if (S == 0)
	    {
	    	r = V;
	    	g = V;
	    	b = V;
	    }
	    else
	    {
	    	int i;
	    	float f, p, q, t;

	    	if (H == 360)
	    		H = 0;
	    	else
	    		H = H / 60;

	    	i = int(trunc(H));
	    	f = H - i;

	    	p = V * (1.0 - S);
	    	q = V * (1.0 - (S * f));
	    	t = V * (1.0 - (S * (1.0 - f)));

	    	switch (i)
	    	{
	    	case 0:
	    		r = V;
	    		g = t;
	    		b = p;
	    		break;

	    	case 1:
	    		r = q;
	    		g = V;
	    		b = p;
	    		break;

	    	case 2:
	    		r = p;
	    		g = V;
	    		b = t;
	    		break;

	    	case 3:
	    		r = p;
	    		g = q;
	    		b = V;
	    		break;

	    	case 4:
	    		r = t;
	    		g = p;
	    		b = V;
	    		break;

	    	default:
	    		r = V;
	    		g = p;
	    		b = q;
	    		break;
	    	}

	    }
        vec3 result = vec3(r, g , b);
        
        return result;
    }
    
vec3 RGBToHSVGenerator(vec3 rgbData){
	float maxV = max(max(rgbData.r,rgbData.g),rgbData.b);
	float minV = min(min(rgbData.r,rgbData.g),rgbData.b);
	float hue;
	float saturation;
	float value;

	value = maxV/255.0;
	if(maxV > 0){
		saturation = 1.0f - float(minV)/float(maxV);
	}
	else if(maxV == 0){
		saturation = 0;
	}
    if (maxV == rgbData.r) {
        hue = (rgbData.g - rgbData.b) / (maxV - minV);

    } else if (maxV == rgbData.g) {
        hue = 2.0f + (rgbData.b - rgbData.r) / (maxV - minV);

    } else {
        hue = 4.0f + (rgbData.r - rgbData.g) / (maxV - minV);
    }
    hue = hue * 60.0;
    if (hue < 0){
		hue = hue + 360.0;	
	} 
	
	if (minV == maxV) {
        hue = 0;
    }
	vec3 hsvVal = vec3(round(hue),saturation,value);
	return hsvVal;
}

void main(){   
    vec3 color = texture2D(input_0,tex_coords).rgb;
    
    float h = (texture2D(input_1,tex_coords).r-0.5)*20;
    float s = texture2D(input_2,tex_coords).r;
    float v = texture2D(input_3,tex_coords).r;
    
    vec3 hsvVal;

    hsvVal = RGBToHSVGenerator(color*255);

    hsvVal.r *= h;
    hsvVal.g *= s;
    hsvVal.b *= v;

    color = hsvToRgbConverter(hsvVal.r,hsvVal.g,hsvVal.b);

    output_0 = vec4(color,1);
}