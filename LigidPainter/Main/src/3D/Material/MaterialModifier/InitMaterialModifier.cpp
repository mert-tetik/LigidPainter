/*
---------------------------------------------------------------------------
LigidPainter - 3D Model texturing software / Texture generator   
---------------------------------------------------------------------------

Copyright (c) 2022-2023, Mert Tetik

All rights reserved.

Official GitHub Link : https://github.com/mert-tetik/LigidPainter
Official Web Page : https://ligidtools.com/ligidpainter

---------------------------------------------------------------------------

    Textures of the Texture Modifier's texture channel buttons are deleted (indexed specially)
    Remove the filter button is indexed specially

*/

#include<glad/glad.h>
#include "LigidGL/LigidGL.hpp"

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <glm/gtc/type_ptr.hpp>

#include <string>
#include <iostream>
#include <vector>

#include "GUI/Elements/Elements.hpp"
#include "UTIL/Util.hpp"
#include "3D/ThreeD.hpp"
#include "ShaderSystem/Shader.hpp"
#include "SettingsSystem/Settings.hpp"

//0 = albedo
//1 = roughness
//2 = metallic 
//3 = normal map
//4 = height map
//5 = ambient Occlusion

MaterialModifier::MaterialModifier(){}

MaterialModifier::MaterialModifier(int modifierIndex){    
    
    /* Init the mask texture */
    this->maskTexture.proceduralProps.proceduralID = 24; //Solid white
    this->maskTexture.proceduralProps.proceduralnverted = 0;
    this->maskTexture.proceduralProps.proceduralScale = 1.f;
    this->maskTexture.title = "AutoGeneratedMask";

    // Create a 1x1 pixel white texture for the procedural texture displaying
    unsigned char whitePixel[] = { 255, 255, 255, 255 }; // 1 pixel, RGBA format (white)
    glGenTextures(1, &this->maskTexture.ID);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, this->maskTexture.ID);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_UNSIGNED_BYTE, whitePixel);

    // Set texture parameters 
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_MIRRORED_REPEAT);

    glBindTexture(GL_TEXTURE_2D, 0);

    if(modifierIndex == TEXTURE_MATERIAL_MODIFIER){
        this->sections = createTextureModifier();
        this->title = "Texture Modifier";
        this->shader = ShaderSystem::textureModifierShader();       
    }
    else if(modifierIndex == DUST_MATERIAL_MODIFIER){
        this->sections = createDustModifier();
        this->title = "Dust Modifier";
        this->shader = ShaderSystem::dustModifierShader();    
    }
    else if(modifierIndex == ASPHALT_MATERIAL_MODIFIER){
        this->sections = createAsphaltModifier();
        this->title = "Asphalt Modifier";
        this->shader = ShaderSystem::asphaltModifierShader();    
    }
    else if(modifierIndex == LIQUID_MATERIAL_MODIFIER){
        this->sections = createLiquidModifier();
        this->title = "Liquid Modifier";
        this->shader = ShaderSystem::liquidModifierShader();    
    }
    else if(modifierIndex == MOSS_MATERIAL_MODIFIER){
        this->sections = createMossModifier();
        this->title = "Moss Modifier";
        this->shader = ShaderSystem::mossModifierShader();    
    }
    else if(modifierIndex == RUST_MATERIAL_MODIFIER){
        this->sections = createRustModifier();
        this->title = "Rust Modifier";
        this->shader = ShaderSystem::rustModifierShader();    
    }
    else if(modifierIndex == SKIN_MATERIAL_MODIFIER){
        this->sections = createSkinModifier();
        this->title = "Skin Modifier";
        this->shader = ShaderSystem::skinModifierShader();    
    }
    else if(modifierIndex == SOLID_MATERIAL_MODIFIER){
        this->sections = createSolidModifier();
        this->title = "Solid Modifier";
        this->shader = ShaderSystem::solidModifierShader();    
    }
    else if(modifierIndex == WOODEN_MATERIAL_MODIFIER){
        this->sections = createWoodenModifier();
        this->title = "Wooden Modifier";
        this->shader = ShaderSystem::woodenModifierShader();    
    }
    else if(modifierIndex == MATH_MATERIAL_MODIFIER){
        this->sections = createMathModifier();
        this->title = "Math Modifier";
        this->shader = ShaderSystem::mathModifierShader();    
    }

    this->modifierIndex = modifierIndex;
}